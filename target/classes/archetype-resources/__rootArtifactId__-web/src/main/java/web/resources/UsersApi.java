#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ${package}.web.resources;

import ${package}.model.bean.user.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.Min;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-06T17:13:49.263043900+02:00[Europe/Rome]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "User", description = "Operation concerning Users")
@RequestMapping("${symbol_dollar}{openapi.exampleRestArchetype.base-path:}")
public interface UsersApi {

    /**
     * GET /users/{id} : Get User with respective ID
     * Get user by his ID.
     *
     * @param id The ID of object to be returned (required)
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUserId",
        summary = "Get User with respective ID",
        description = "Get user by his ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            })
        }
    )
    @GetMapping(
        value = "/users/{id}",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<User> getUserId(
        @Min(0L) @Parameter(name = "id", description = "The ID of object to be returned", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /users/roles/{id} : Get User with his Roles from ID
     * Get user (with roles) by his ID.
     *
     * @param id The ID of object to be returned (required)
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUserIdWithRoles",
        summary = "Get User with his Roles from ID",
        description = "Get user (with roles) by his ID.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            })
        }
    )
    @GetMapping(
        value = "/users/roles/{id}",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<User> getUserIdWithRoles(
        @Min(0L) @Parameter(name = "id", description = "The ID of object to be returned", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    );


    /**
     * GET /users : Gets all User
     * Gets all users present.
     *
     * @return Successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getUsers",
        summary = "Gets all User",
        description = "Gets all users present.",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class))),
                @Content(mediaType = "application/xml", array = @ArraySchema(schema = @Schema(implementation = User.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetail.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = ProblemDetail.class))
            })
        }
    )
    @GetMapping(
        value = "/users",
        produces = { "application/json", "application/xml" }
    )
    ResponseEntity<Page<User>> getUsers(@ParameterObject final Pageable pageable);

}
